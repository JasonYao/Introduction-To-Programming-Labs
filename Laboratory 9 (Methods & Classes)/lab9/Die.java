import java.awt.*;/** * @author Jason Yao * Creates Die objects with 6 sides */public class Die{    //Attribute Variables    private int xCoord;    private int yCoord;    private int currentValue;    private int size;    public Die (int xPos, int yPos)    {        // Step 1 of the constructor: initializes the instance variables        xCoord = xPos; // Initializes th x-position        yCoord = yPos; // Initializes th y-position        // Step 2 of the constructor: invokes the reRoll method to inialize the currentValue        reRoll();        this.setSize(50);    }    /**     * Updates the current value of the die with a new "random" value between 1 and 6 (inclusive)     */    private void reRoll()    {        double middle = Math.random() *6;        currentValue = (int) middle + 1;    }    // Assume xCoord and yCoord is the orthogenal vertex of the cube.    public void paint(Graphics g)    {        if (g != null)        {            // Sets up the cube            //Sets up face 1            int [ ] x1 = {xCoord - size, xCoord - 5, xCoord + size, xCoord};            int [ ] y1 = {yCoord - size/2, yCoord - size, yCoord - size/2, yCoord};            g.setColor(Color.WHITE); // Sets the colour white            g.fillPolygon(x1, y1, 4); // fills in face 1            g.setColor(Color.BLACK); // Sets the colour black            g.drawPolygon(x1, y1, 4); // Outlines face 1            // Sets up face 2            int [ ] x2 = {xCoord - size, xCoord, xCoord, xCoord - size};            int [ ] y2 = {yCoord - size/2, yCoord, yCoord + size, yCoord + size/2};            g.setColor(Color.WHITE); // Sets the colour white            g.fillPolygon(x2, y2, 4); // fills in face 2            g.setColor(Color.BLACK); // Sets the colour black            g.drawPolygon(x2, y2, 4); // Outlines face 2            // Sets up face 3            int [ ] x3 = {xCoord + size, xCoord, xCoord, xCoord + size};            int [ ] y3 = {yCoord - size/2, yCoord, yCoord + size, yCoord + size/2};            g.setColor(Color.WHITE); // Sets the colour white            g.fillPolygon(x3, y3, 4); // fills in face 3            g.setColor(Color.BLACK); // Sets the colour black            g.drawPolygon(x3, y3, 4); // Outlines face 3            // Impliments the pips            int xPos = size/2 - 5;            int yPos = size/2 - 5;            switch (currentValue)            {                case 1:                // Draws on face 1                g.fillOval(xCoord - 5, yCoord - 3*yPos/2, 10, 10); // Draws a pip in relation to the orthogonal centre                // Draws on face 2                // Draws 2 pips                for (int i = 0; i < 2; ++i)                {                    g.fillOval(xCoord - xPos, yCoord + yPos + size/5, 10, 10); // Draws 2 pips in relation to the top left corner of the die                    xPos = xPos + (size/2);                    yPos = yPos - 9*(size/10);                }                // Draws on face 3                // Draws 3 pips                                // Resets the xPos and yPos                xPos = 7*(size/10);                yPos = 3*(size/10);                // Draws the three pips                for (int i = 0; i< 3; ++i)                {                     g.fillOval(xCoord + xPos, yCoord - yPos, 10, 10); // Draws 2 pips in relation to the orthogonal centre                    xPos = xPos - 3*(size/10) - size/20;                    yPos = yPos - 3*(size/10) - 2*(size/10);                }                break;                case 2:                // Draws on face 1                for (int i = 0; i < 2; ++i)                {                    g.fillOval(xCoord + xPos, yCoord - yPos - size/5, 10, 10); // Draws 2 pips in relation to the top left corner of the die                    xPos = xPos - 4*(size/5);                }                // Draws on face 2                xPos = size/4;                yPos = 5*(size/8);                // Draws 3 pips                for (int i = 0; i < 3; ++i)                {                    g.fillOval(xCoord - xPos, yCoord + yPos, 10, 10); // Draws 2 pips in relation to the top left corner of the die                    xPos = xPos + 3*(size/10);                    yPos = yPos - 17*(size/32);                }                // Draws on face 3                // Draws 1 pip                                // Resets the xPos and yPo                xPos = 4*(size/10);                yPos = size/5;                g.fillOval(xCoord + xPos, yCoord + yPos, 10, 10); // Draws 1 pip in relation to the orthogenal centre of the die                break;                case 3:                // Draws on face 1                for (int i = 0; i < 3; ++i)                {                    g.fillOval(xCoord + xPos, yCoord - yPos - size/5, 10, 10); // Draws 3 pips in relation to the orthogonal centre                    xPos = xPos - 2*size/5;                }                // Draws on face 2                // Draws 1 pip                                xPos = 6*(size/10);                yPos = size/5;                                // Draws a single pip                g.fillOval(xCoord - xPos, yCoord + yPos, 10, 10);                // Resets the xPos and yPos                xPos = 6*(size/10);                yPos = 2*(size/10);                // Draws on face 3                // Draws 2 pips                                // Resets the xPos and yPos                xPos = 7*(size/10);                yPos = 3*(size/10);                // Draws the middle two pips                for (int i = 0; i< 2; ++i)                {                     g.fillOval(xCoord + xPos, yCoord - yPos, 10, 10); // Draws 2 pips in relation to the orthogonal centre                    xPos = xPos - 6*(size/10) - size/20;                    yPos = yPos - 3*(size/10) - 7*(size/10) + size/20;                }                break;                case 4:                // Draws on face 1                // Draws the left and right pip                for (int i = 0; i< 2; ++i)                {                     g.fillOval(xCoord - 2*(xPos), yCoord - yPos - size/5, 10, 10); // Draws 2 pips in relation to the orthogonal centre                    xPos = xPos - 7*(size/10);                }                // Resets the xPos and yPos                xPos = size/10;                yPos = size/2;                // Draws the top and bottom pip                for (int i = 0; i< 2; ++i)                {                     g.fillOval(xCoord - xPos, yCoord - yPos + size/5, 10, 10); // Draws 2 pips in relation to the orthogonal centre                    yPos = yPos + 3*(size/5);                    xPos = xPos + size/10;                }                // Draws on face 2                // Draws 2 pips                // Resets the xPos and yPo                xPos = size/2 - 5;                yPos = size/2 - 5;                for (int i = 0; i < 2; ++i)                {                    g.fillOval(xCoord - xPos, yCoord + yPos + size/5, 10, 10); // Draws 2 pips in relation to the top left corner of the die                    xPos = xPos + (size/2);                    yPos = yPos - 9*(size/10);                }                // Draws on face 3                // Draws 1 pip                // Resets the xPos and yPo                xPos = 4*(size/10);                yPos = size/5;                g.fillOval(xCoord + xPos, yCoord + yPos, 10, 10); // Draws 1 pip in relation to the orthogenal centre of the die                                break;                case 5:                // Draws on face 1                g.fillOval(xCoord - 5, yCoord - 3*yPos/2, 10, 10); // Draws a pip in relation to the orthogonal centre                // Draws the left and right pip                for (int i = 0; i< 2; ++i)                {                     g.fillOval(xCoord - 2*(xPos), yCoord - yPos - size/5, 10, 10); // Draws 2 pips in relation to the orthogonal centre                    xPos = xPos - 7*(size/10);                }                // Resets the xPos and yPos                xPos = size/10;                yPos = size/2;                // Draws the top and bottom pip                for (int i = 0; i< 2; ++i)                {                     g.fillOval(xCoord - xPos, yCoord - yPos + size/5, 10, 10); // Draws 2 pips in relation to the orthogonal centre                    yPos = yPos + 3*(size/5);                    xPos = xPos + size/10;                }                // Draws on face 2                // Draws 1 pip                                xPos = 6*(size/10);                yPos = size/5;                                // Draws a single pip                g.fillOval(xCoord - xPos, yCoord + yPos, 10, 10);                // Draws on face 3                // Draws 3 pips                                // Resets the xPos and yPos                xPos = 7*(size/10);                yPos = 3*(size/10);                // Draws the three pips                for (int i = 0; i< 3; ++i)                {                     g.fillOval(xCoord + xPos, yCoord - yPos, 10, 10); // Draws 2 pips in relation to the orthogonal centre                    xPos = xPos - 3*(size/10) - size/20;                    yPos = yPos - 3*(size/10) - 2*(size/10);                }                break;                case 6:                // Draws on Face 1                // Draws the left and right pip                for (int i = 0; i< 2; ++i)                {                     g.fillOval(xCoord - 2*(xPos), yCoord - yPos - size/5, 10, 10); // Draws 2 pips in relation to the orthogonal centre                    xPos = xPos - 7*(size/10);                }                // Resets the xPos and yPos                xPos = size/10;                yPos = size/2;                // Draws the top and bottom pip                for (int i = 0; i< 2; ++i)                {                     g.fillOval(xCoord - xPos, yCoord - yPos + size/5, 10, 10); // Draws 2 pips in relation to the orthogonal centre                    yPos = yPos + 3*(size/5);                    xPos = xPos + size/10;                }                // Resets the xPos and yPos                xPos = size/5;                yPos = size/10;                // Draws the middle two pips                for (int i = 0; i< 2; ++i)                {                     g.fillOval(xCoord - size/3 - xPos, yCoord - 3*(size/5) - yPos, 10, 10); // Draws 2 pips in relation to the orthogonal centre                    xPos = xPos - size/5 - size/3 - size/4;                    yPos = yPos - size/10 - 4*(size/10) + 3*(size/10);                }                // Draws on face 2                // Draws 3 pips                // Resets the xPos and yPos                xPos = size/4;                yPos = 5*(size/8);                // Draws 3 pips                for (int i = 0; i < 3; ++i)                {                    g.fillOval(xCoord - xPos, yCoord + yPos, 10, 10); // Draws 2 pips in relation to the top left corner of the die                    xPos = xPos + 3*(size/10);                    yPos = yPos - 17*(size/32);                }                // Draws on face 3                // Draws 2 pips                                // Resets the xPos and yPos                xPos = 7*(size/10);                yPos = 3*(size/10);                // Draws the middle two pips                for (int i = 0; i< 2; ++i)                {                     g.fillOval(xCoord + xPos, yCoord - yPos, 10, 10); // Draws 2 pips in relation to the orthogonal centre                    xPos = xPos - 6*(size/10) - size/20;                    yPos = yPos - 3*(size/10) - 7*(size/10) + size/20;                }                break;            }            //         if (g != null)            //         {            //             // Draws the rest of the die            //             g.setColor(Color.WHITE); // Sets the colour white            //             g.fillRect(xCoord, yCoord, size, size); // Draws the outline of the die            //             //             // Draws the outline            //             g.setColor(Color.BLACK); // Sets the colour black            //             g.drawRect(xCoord, yCoord, size, size); // Draws the outline of the die            //             //             // Draws the value of the String            //             //g.setFont(new Font("default", Font.BOLD, 30));            //             //String dieValue = String.valueOf(currentValue);            //             //g.drawString(dieValue, xCoord + 15, yCoord + 35);            //             //             // Draws the pips of the die            //             //             int xPos = size/2 - 5;            //             int yPos = size/2 - 5;            //             switch (currentValue)            //             {            //                 case 1:            //                 g.fillOval(xCoord + xPos, yCoord + yPos , 10, 10); // Draws a pip in relation to the top left corner of the die            //                 break;            //             //                 case 2:            //                 for (int i = 0; i < 2; ++i)            //                 {            //                     g.fillOval(xCoord + xPos + size/5, yCoord + yPos - size/5, 10, 10); // Draws 2 pips in relation to the top left corner of the die            //                     xPos = xPos - 2*(size/5);            //                     yPos = yPos + 2*(size/5);            //                 }            //                 break;            //             //                 case 3:            //                 for (int i = 0; i < 3; ++i)            //                 {            //                     g.fillOval(xCoord + xPos + size/5, yCoord + yPos - size/5, 10, 10); // Draws 3 pips in relation to the top left corner of the die            //                     xPos = xPos - size/5;            //                     yPos = yPos + size/5;            //                 }            //                 break;            //             //                 case 4:            //                 for (int i = 0; i< 2; ++i)            //                 {             //                     g.fillOval(xCoord + xPos + size/5, yCoord + size/5, 10, 10); // Draws 2 pips in relation to the top left corner of the die            //                     xPos = xPos - 2*(size/5);            //                 }            //                 xPos = size/2 - 5;            //                 for (int i =0; i< 2; ++i)            //                 {             //                     g.fillOval(xCoord + xPos + size/5, yCoord + yPos + size/5, 10, 10); // Draws 2 pips in relation to the top left corner of the die            //                     xPos = xPos - 2*(size/5);            //                 }            //                 break;            //             //                 case 5:            //                 g.fillOval(xCoord + xPos, yCoord + yPos , 10, 10); // Draws 5 pips in relation to the top left corner of the die            //                 for (int i = 0; i< 2; ++i)            //                 {             //                     g.fillOval(xCoord + xPos + size/5, yCoord + size/5, 10, 10); // Draws 2 pips in relation to the top left corner of the die            //                     xPos = xPos - 2*(size/5);            //                 }            //                 xPos = size/2 - 5;            //                 for (int i =0; i< 2; ++i)            //                 {             //                     g.fillOval(xCoord + xPos + size/5, yCoord + yPos + size/5, 10, 10); // Draws 2 pips in relation to the top left corner of the die            //                     xPos = xPos - 2*(size/5);            //                 }            //                 break;            //             //                 case 6:            //                 for (int i =0; i< 2; ++i)            //                 {             //                     g.fillOval(xCoord + xPos + size/5, yCoord + size/10, 10, 10); // Draws 2 pips in relation to the top left corner of the die            //                     xPos = xPos - 2*(size/5);            //                 }            //                 xPos = size/2 - 5;            //                 for (int i =0; i< 2; ++i)            //                 {             //                     g.fillOval(xCoord + xPos + size/5, yCoord + yPos + size/3, 10, 10); // Draws 2 pips in relation to the top left corner of the die            //                     xPos = xPos - 2*(size/5);            //                 }            //                             //                 xPos = size/2 - 5;            //                 for (int i =0; i< 2; ++i)            //                 {             //                     g.fillOval(xCoord + xPos + size/5, yCoord + yPos, 10, 10); // Draws 2 pips in relation to the top left corner of the die            //                     xPos = xPos - 2*(size/5);            //                 }            //                 break;            //             //             }            //         }            //         else            //         {            //             // Does nothing, as expected            //         }        }    }    public void roll(Graphics g)    {        reRoll();        paint(g);    }    public int value()    {        int value = currentValue;        return value;    }    public String toString()    {        return String.valueOf(currentValue);    }    public boolean equals(Die other)    {        if (this.currentValue == other.currentValue)        {            return true;        }        else        {            return false;        }    }    public void setSize(int newSize)    {        if ((newSize >= 10) && (newSize <= 250))        {            size = newSize;        }        else        {            double rand = Math.random();            if (rand <= 0.5)            {                size = 40;            }            else            {                size = 100;            }        }    }}