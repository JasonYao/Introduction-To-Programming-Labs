#BlueJ class context
comment0.params=args
comment0.target=void\ main(java.lang.String[])
comment0.text=\n\ main\ method\:\n
comment1.params=
comment1.target=Tree()
comment1.text=\n\ constructor\ for\ Tree\ class\n
comment10.params=
comment10.target=void\ run()
comment11.params=te
comment11.target=void\ handleError(TreeException)
comment11.text=\n\ called\ when\ TreeException\ occurs.\ Sets\ error\ status\ to\ non-null,\ which\ does\n\ causes\ a\ repaint()\ to\ occor,\ which\ will\ cause\ a\ big\ black\ 'X'\ to\ display,\n\ unless\ the\ error\ status\ is\ "Interrupt"--in\ which\ the\ exception\ was\ thrown\n\ simply\ to\ stop\ execution.\n\ \n\ @param\ te\n\ \ \ \ \ \ the\ TreeException\n
comment12.params=
comment12.target=void\ moveUp()
comment12.text=\n\ causes\ the\ current\ node\ to\ move\ up\ the\ tree\n
comment13.params=
comment13.target=void\ moveLeft()
comment13.text=\n\ causes\ the\ current\ node\ to\ left\ (and\ down)\ the\ tree\n
comment14.params=
comment14.target=void\ moveRight()
comment14.text=\n\ causes\ the\ current\ node\ to\ right\ (and\ down)\ the\ tree\n
comment15.params=
comment15.target=boolean\ canGoLeft()
comment15.text=\n\ tells\ whether\ current\ node\ can\ move\ left\ (and\ down)\ without\ going\ off\ the\ tree\n\ \n\ @return\n\ \ \ \ \ \ whether\ the\ node\ can\ move\ down/left\n
comment16.params=
comment16.target=boolean\ canGoRight()
comment16.text=\n\ tells\ whether\ current\ node\ can\ move\ right\ (and\ down)\ without\ going\ off\ the\ tree\n\ \n\ @return\n\ \ \ \ \ \ whether\ the\ node\ can\ move\ down/right\n
comment17.params=
comment17.target=boolean\ canGoUp()
comment17.text=\n\ tells\ whether\ current\ node\ can\ move\ up\ without\ going\ off\ the\ tree\n\ \n\ @return\n\ \ \ \ \ \ whether\ the\ node\ can\ move\ up\n
comment18.params=
comment18.target=boolean\ foundTarget()
comment18.text=\n\ tells\ whether\ the\ current\ node\ is\ at\ the\ target\n\ \n\ @return\n\ \ \ \ \ \ whether\ the\ current\ node\ is\ at\ the\ target\n
comment19.params=
comment19.target=void\ error()
comment19.text=\n\ registers\ an\ error\ by\ throwing\ a\ TreeException\n
comment2.params=
comment2.target=void\ reset()
comment2.text=\n\ reset's\ the\ tree's\ height,\ current\ location\ and\ target\ location;\ clears\n\ error\ status\n
comment20.params=
comment20.target=void\ checkInterrupt()
comment20.text=\n\ if\ the\ interrupt-flag\ is\ set,\ throws\ a\ TreeException\ with\n\ data\ "Interrupt"\n
comment21.params=
comment21.target=void\ delay()
comment21.text=\n\ delay\ for\ a\ short\ amount\ of\ time,\ so\ that\ the\ human\ user\ can\ see\ discrete\n\ movements\n
comment3.params=n
comment3.target=void\ setNumLevels(int)
comment3.text=\n\ sets\ the\ tree's\ number\ of\ levels\n\ \n\ @param\ n\n\ \ \ \ \ \ the\ number\ of\ levels\ to\ use\n
comment4.params=g
comment4.target=void\ paint(java.awt.Graphics)
comment4.text=\n\ callback\ method\ that\ paints\ the\ suface\n\ \n\ @param\ g\n\ \ \ \ \ \ the\ Graphics\ object\ on\ which\ to\ paint\n
comment5.params=row\ g
comment5.target=void\ drawTree(int,\ java.awt.Graphics)
comment5.text=\n\ draws\ a\ (sub)tree\ on\ a\ graphics\ object\n\ \n\ @param\ row\n\ \ \ \ \ \ the\ row\ to\ draw\n\ @param\ g\n\ \ \ \ \ \ the\ Graphics\ object\ to\ draw\ on\n
comment6.params=row\ col
comment6.target=java.awt.Rectangle\ boxFor(int,\ int)
comment6.text=\n\ compute\ the\ box\ into\ which\ a\ given\ circle\ is\ to\ be\ drawn\n\ \n\ @param\ row\n\ \ \ \ \ \ the\ row\ number\ of\ the\ node\n\ @param\ col\n\ \ \ \ \ \ the\ column\ number\ of\ the\ node\n\ @return\n\ \ \ \ \ \ a\ rectangle\ that\ denotes\ the\ box\n
comment7.params=r
comment7.target=java.awt.Point\ rectCenter(java.awt.Rectangle)
comment7.text=\n\ computes\ the\ center\ of\ a\ rectangle\n\ \n\ @param\ r\n\ \ \ \ \ \ the\ rectangle\n\ @return\n\ \ \ \ \ \ a\ Point\ object\ that\ denotes\ the\ rectangle's\ center\n
comment8.params=
comment8.target=java.awt.Point\ randomNode()
comment8.text=\n\ returns\ a\ random\ node\ in\ the\ tree\n\ \n\ @return\n\ \ \ \ \ \ a\ Point\ object\ that\ denotes\ the\ column\ and\ row\ position\ of\ a\ random\n\ \ \ \ \ \ node\ in\ the\ tree\n
comment9.params=ae
comment9.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment9.text=\n\ callback\ method\ for\ button-presses\n\ \n\ @param\ ae\n\ \ \ \ \ \ the\ action\ event\n
numComments=22
