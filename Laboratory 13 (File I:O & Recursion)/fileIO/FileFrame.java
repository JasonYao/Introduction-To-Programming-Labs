/* CS273 Students: DO NOT EDIT THIS FILE! */

/**
 * FileFrame.java - creates a GUI for a user to access the file I/O functions in
 * a FileHandler object.
 *
 * Author: Steven R. Vegdahl
 * Date: 5 November 2000
 * Updated:  06 April 2011 by Andrew Nuxoll - recovered from .class files
 * Updated:  11 April 2012 by Andrew Nuxoll - re-added a limited set of comments
 *
 */

import java.io.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class FileFrame extends JFrame
    implements WindowListener, ActionListener 
{
    /** preferred window size */
    private static int WINDOW_WIDTH = 800;
    private static int WINDOW_HEIGHT = 400;
    
    
    /** colors used for the window background*/
    private static Color lightGreen = new Color(180,255,180);
    private static Color lightBlue = new Color(200,200,255);

    /** controls presented on the GUI */
    private Button inputButton;
    private TextField inputFileField;
    private TextField callField;
    private Button outputButton;
    private TextField outputFileField;
    private TextArea messageArea;
    private TextField numberField;
    private Button countBytesButton;
    private Button copyFileButton;
    private Button createFileButton;
    private Button listContentsButton;
    private Button deleteFileButton;
    private TextField stringField;
    private Button appendStringButton;

    /** This is the class that the students edit */
    private FileHandler fh;

    /**
     * main
     *
     * creates the window and displays it to the user
     */
    public static void main(String[] args) 
    {
        FileFrame ff = new FileFrame();
        ff.setVisible(true);
        ff.setTitle("CS273 Lab 13:  File I/O");
    }

    /**
     * FileFrame ctor
     *
     * constructs the GUI controls and arranges them in the window.
     */
    public FileFrame() 
    {
        this.setSize(WINDOW_WIDTH,WINDOW_HEIGHT);
        this.addWindowListener(this);
        
        fh = new FileHandler();

        Panel p = new Panel();
        p.setBackground(lightGreen);

        Panel p1 = new Panel();
        p1.add(new Label("Input file: "));
        inputFileField = new TextField("",50);
        inputFileField.setEditable(false);
        inputFileField.setBackground(Color.white);
        p1.add(inputFileField);
        inputButton = new Button("Browse...");
        inputButton.setBackground(lightBlue);
        p1.add(inputButton);
        p.add(p1);
        inputButton.addActionListener(this);

        Panel p2 = new Panel();
        p2.add(new Label("Output file: "));
        outputFileField = new TextField("     ",50);
        outputFileField.setEditable(false);
        outputFileField.setBackground(Color.white);
        p2.add(outputFileField);
        outputButton = new Button("Browse...");
        outputButton.setBackground(lightBlue);
        p2.add(outputButton);
        p.add(p2);
        outputButton.addActionListener(this);
        
        Panel p4 = new Panel();
        
        createFileButton = new Button("Create empty file");
        createFileButton.setBackground(lightBlue);
        p4.add(createFileButton);
        createFileButton.addActionListener(this);
        
        deleteFileButton = new Button("Delete file");
        deleteFileButton.setBackground(lightBlue);
        p4.add(deleteFileButton);
        deleteFileButton.addActionListener(this);
        
        countBytesButton = new Button("Count bytes");
        countBytesButton.setBackground(lightBlue);
        p4.add(countBytesButton);
        countBytesButton.addActionListener(this);
        
        listContentsButton = new Button("List contents");
        listContentsButton.setBackground(lightBlue);
        p4.add(listContentsButton);
        listContentsButton.addActionListener(this);
        
        copyFileButton = new Button("Copy file");
        copyFileButton.setBackground(lightBlue);
        p4.add(copyFileButton);
        copyFileButton.addActionListener(this);
        p.add(p4);

        //The user types the string they want to append in this field
        stringField = new TextField("CS273 File I/O Laboratory",20);
        stringField.setBackground(Color.white);
        p4.add(stringField);
        
        appendStringButton = new Button("Append string");
        appendStringButton.setBackground(lightBlue);
        p4.add(appendStringButton);
        appendStringButton.addActionListener(this); 
        p.add(p4);
        
        
        
        messageArea = new TextArea("", 10, 80, TextArea.SCROLLBARS_NONE);
        messageArea.setBackground(Color.white);
        messageArea.setEditable(false);
        p.add(messageArea);
        
        Panel p6 = new Panel();
        p6.add(new Label("Call:"));
        callField = new TextField("",70);
        callField.setBackground(Color.white);
        callField.setEditable(false);
        p6.add(callField);
        p.add(p6);

        this.getContentPane().add(p);
    }


    /* Because FileFrame is a subclass of JFrame, it must implement the
     * following event handler methods.  However, we don't need to do anything
     * special  when these events occur
     */
    public void windowClosing(WindowEvent we) 
    {}
    public void windowClosed(WindowEvent we) 
    { }
    public void windowOpened(WindowEvent we) 
    { }
    public void windowIconified(WindowEvent we) 
    { }
    public void windowDeiconified(WindowEvent we) 
    { }
    public void windowActivated(WindowEvent we) 
    { }
    public void windowDeactivated(WindowEvent we) 
    { }

    /**
     * actionPerformed
     *
     * responds to all button press events from the user
     */
    public void actionPerformed(ActionEvent ae) 
    {
        Object obj = ae.getSource();
        if (obj == inputButton) 
        {
            FileDialog fd = new FileDialog(this, "input file", FileDialog.LOAD);
            fd.setVisible(true);
            String dir = fd.getDirectory();
            String file = fd.getFile();
            if (dir != null && file != null) 
            {
                inputFileField.setText(fd.getDirectory()+fd.getFile());
            }
        }
        else if (obj == outputButton) 
        {
            FileDialog fd = new FileDialog(this, "output file", FileDialog.LOAD);
            fd.setVisible(true);
            String dir = fd.getDirectory();
            String file = fd.getFile();
            if (dir != null && file != null) 
            {
                if (file.toLowerCase().endsWith(".java")) 
                {
                    messageArea.setText("Output file may not end with '.java'");
                    return;
                }
                outputFileField.setText(fd.getDirectory()+fd.getFile());
            }
        }
        else if (obj == countBytesButton) 
        {
            String filename = inputFileField.getText();
            if (filename.trim().length() == 0)
            
            {
                messageArea.setText("No input file specified.");
                return;
            }
            
            callField.setText("fh.countBytes(\""+filename+"\")");
            int numBytes = fh.countBytes(filename);
            if (numBytes >= 0) 
            {
                messageArea.setText(numBytes+" bytes found");
                return;
            }
            
        }
        else if (obj == createFileButton) 
        {
            String filename = outputFileField.getText();
            if (filename.trim().length() == 0)
            
            {
                messageArea.setText("No output file specified.");
                return;
            }
            
            callField.setText("fh.createEmptyFile(\"" + filename + "\")");
            fh.createEmptyFile(filename);
        }
        else if (obj == deleteFileButton) 
        {
            String filename = outputFileField.getText();
            if (filename.trim().length() == 0)
            
            {
                messageArea.setText("No output file specified.");
                return;
            }
            
            callField.setText("fh.deleteFile(\""+filename+"\")");
            fh.deleteFile(filename);
        }
        else if (obj == copyFileButton) 
        {
            String srcFile = inputFileField.getText();
            if (srcFile.trim().length() == 0)
            
            {
                messageArea.setText("No input file specified.");
                return;
            }
            
            String dstFile = outputFileField.getText();
            if (dstFile.trim().length() == 0)
            {
                messageArea.setText("No output file specified.");
                return;
            }
            
            callField.setText("fh.copyFile(\""+srcFile+"\",\""+dstFile+"\")");
            fh.copyFile(srcFile,  dstFile);
        }
        else if (obj == listContentsButton) 
        {
            String filename = inputFileField.getText();
            if (filename.trim().length() == 0)
            
            {
                messageArea.setText("No input file specified.");
                return;
            }
            
            callField.setText("fh.listContents(\""+filename+"\")");
            fh.listContents(filename);
        }
        else if (obj == appendStringButton)
        {
            String myStr = stringField.getText();
            callField.setText("fh.appendString(\""+outputFileField.getText()+"\",\""+
                   myStr+"\")");
            fh.appendString(outputFileField.getText(), myStr);
        }

        //report the result
        messageArea.setText(fh.getMessage());
    }


}
